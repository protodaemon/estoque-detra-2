<?php

namespace App\Services;

use App\Models\ProdutoDecoracao;
use App\Models\LocacaoItem;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

/**
 * Servi√ßo respons√°vel por calcular a disponibilidade real dos produtos
 * considerando loca√ß√µes ativas no per√≠odo especificado
 * 
 * IMPORTANTE: Este servi√ßo N√ÉO altera o estoque f√≠sico dos produtos.
 * Ele apenas CALCULA quantos itens est√£o dispon√≠veis para loca√ß√£o
 * baseado nas loca√ß√µes existentes.
 */
class DisponibilidadeService
{
    /**
     * Calcula disponibilidade para TODOS os produtos em um per√≠odo espec√≠fico
     * 
     * @param string $dataInicio - Data de in√≠cio do per√≠odo
     * @param string $dataFim - Data de fim do per√≠odo
     * @return array - Array com disponibilidade de todos os produtos
     */
    public function verificarDisponibilidadePorPeriodo($dataInicio, $dataFim)
    {
        // Busca TODOS os produtos de decora√ß√£o
        $produtos = ProdutoDecoracao::all();
        $resultado = [];

        // Processa cada produto individualmente
        foreach ($produtos as $produto) {
            // Pega a quantidade dispon√≠vel original do produto (estoque f√≠sico)
            $qtdDisponivelOriginal = $produto->qtd_disponivel ?? 0;

            // Pega a quantidade danificada do produto
            $qtdDanificado = $produto->qtd_danificado ?? 0;

            // AQUI √â A M√ÅGICA: Calcula quantos itens est√£o "em uso" no per√≠odo
            // Busca loca√ß√µes que:
            // - Status 0 (pendente) ou 1 (parcialmente devolvida) - ATIVAS
            // - Status 2 (finalizada) N√ÉO entra na conta
            $emUso = LocacaoItem::where('produto_decoracao_id', $produto->produtos_decoracao_id)
                ->whereHas('locacao', function ($q) use ($dataInicio, $dataFim) {
                    // Apenas loca√ß√µes ATIVAS (0 = pendente, 1 = parcial)
                    // Status 2 (finalizada) n√£o conta porque j√° foi devolvida
                    $q->whereIn('status', [0, 1])
                        ->where(function ($query) use ($dataInicio, $dataFim) {
                            // Loca√ß√µes que se sobrep√µem ao per√≠odo consultado:

                            // 1. Loca√ß√£o inicia no per√≠odo
                            $query->whereBetween('data_locacao', [$dataInicio, $dataFim])
                                // 2. OU loca√ß√£o termina no per√≠odo
                                ->orWhereBetween('data_prevista_retorno', [$dataInicio, $dataFim])
                                // 3. OU loca√ß√£o engloba todo o per√≠odo (inicia antes e termina depois)
                                ->orWhere(function ($q) use ($dataInicio, $dataFim) {
                                    $q->where('data_locacao', '<=', $dataInicio)
                                        ->where('data_prevista_retorno', '>=', $dataFim);
                                });
                        });
                })
                ->sum('qtd_alugada'); // Soma todas as quantidades alugadas no per√≠odo

            // Calcula quantos itens est√£o realmente utiliz√°veis
            // (total - danificados = utiliz√°veis)
            $qtdUtilizavel = max(0, $qtdDisponivelOriginal - $qtdDanificado);

            // Calcula quantos est√£o DISPON√çVEIS para nova loca√ß√£o
            // (utiliz√°veis - em uso = dispon√≠vel)
            $disponivel = max(0, $qtdUtilizavel - $emUso);

            // Monta o resultado para este produto
            $resultado[] = [
                'produtos_decoracao_id' => $produto->produtos_decoracao_id,
                'id'                    => $produto->produtos_decoracao_id,
                'nome'                  => $produto->nome,
                'foto'                  => $produto->foto,
                'categoria_id'          => $produto->categoria_decoracao ?? null,
                'valor_locacao'         => $produto->valor_locacao,
                'qtd_total'             => $qtdDisponivelOriginal,  // Estoque f√≠sico original
                'qtd_disponivel'        => $disponivel,             // Dispon√≠vel para loca√ß√£o
                'qtd_emprenho'          => $emUso,                  // Em uso (locado)
                'qtd_danificado'        => $qtdDanificado,          // Danificado (n√£o utiliz√°vel)
            ];

            // Log para debug/acompanhamento
            Log::debug('Produto disponibilidade', [
                'produto_id' => $produto->produtos_decoracao_id,
                'nome'       => $produto->nome,
                'qtd_total'  => $qtdDisponivelOriginal,
                'qtd_danificado' => $qtdDanificado,
                'qtd_emprenho' => $emUso,
                'qtd_disponivel' => $disponivel,
            ]);
        }

        return $resultado;
    }

    /**
     * Vers√£o OTIMIZADA para calcular disponibilidade apenas de produtos espec√≠ficos
     * Mais eficiente quando voc√™ j√° sabe quais produtos quer consultar
     * 
     * @param array $produtoIds - Array com IDs dos produtos a consultar
     * @param string $dataInicio - Data de in√≠cio do per√≠odo
     * @param string $dataFim - Data de fim do per√≠odo
     * @return array - Array associativo com disponibilidade (chave = produto_id)
     */
    public function verificarDisponibilidadePorIds($produtoIds, $dataInicio, $dataFim)
    {
        // Se n√£o passou nenhum ID, retorna vazio
        if (empty($produtoIds)) {
            return [];
        }

        // Busca apenas os produtos especificados
        $produtos = ProdutoDecoracao::whereIn('produtos_decoracao_id', $produtoIds)->get();
        $resultado = [];

        // OTIMIZA√á√ÉO: Faz uma √∫nica query para buscar todas as loca√ß√µes do per√≠odo
        // Agrupa por produto_id e j√° soma as quantidades
        $locacoesItens = LocacaoItem::whereIn('produto_decoracao_id', $produtoIds)
            ->whereHas('locacao', function ($q) use ($dataInicio, $dataFim) {
                // Mesma l√≥gica de filtro das loca√ß√µes ativas
                $q->whereIn('status', [0, 1]) // Apenas pendentes ou parciais
                    ->where(function ($query) use ($dataInicio, $dataFim) {
                        // Mesma l√≥gica de sobreposi√ß√£o de datas
                        $query->whereBetween('data_locacao', [$dataInicio, $dataFim])
                            ->orWhereBetween('data_prevista_retorno', [$dataInicio, $dataFim])
                            ->orWhere(function ($q) use ($dataInicio, $dataFim) {
                                $q->where('data_locacao', '<=', $dataInicio)
                                    ->where('data_prevista_retorno', '>=', $dataFim);
                            });
                    });
            })
            ->select('produto_decoracao_id', DB::raw('SUM(qtd_alugada) as total_em_uso'))
            ->groupBy('produto_decoracao_id')
            ->pluck('total_em_uso', 'produto_decoracao_id'); // Retorna array [produto_id => total_em_uso]

        // Processa cada produto
        foreach ($produtos as $produto) {
            // Dados base do produto
            $qtdDisponivelOriginal = $produto->qtd_disponivel ?? 0;
            $qtdDanificado = $produto->qtd_danificado ?? 0;

            // Pega a quantidade em uso deste produto (j√° calculada na query acima)
            $emUso = $locacoesItens[$produto->produtos_decoracao_id] ?? 0;

            // Calcula disponibilidade
            $qtdUtilizavel = max(0, $qtdDisponivelOriginal - $qtdDanificado);
            $disponivel = max(0, $qtdUtilizavel - $emUso);

            // Resultado indexado por produto_id para acesso r√°pido
            $resultado[$produto->produtos_decoracao_id] = [
                'produtos_decoracao_id' => $produto->produtos_decoracao_id,
                'id'                    => $produto->produtos_decoracao_id,
                'nome'                  => $produto->nome,
                'foto'                  => $produto->foto,
                'categoria_id'          => $produto->categoria_decoracao ?? null,
                'valor_locacao'         => $produto->valor_locacao,
                'qtd_total'             => $qtdDisponivelOriginal,  // Estoque f√≠sico
                'qtd_disponivel'        => $disponivel,             // Dispon√≠vel para loca√ß√£o
                'qtd_emprenho'          => $emUso,                  // Em uso (comprometido)
                'qtd_danificado'        => $qtdDanificado,          // Danificado
            ];

            // Log para debug
            Log::debug('Produto disponibilidade', [
                'produto_id' => $produto->produtos_decoracao_id,
                'nome'       => $produto->nome,
                'qtd_total'  => $qtdDisponivelOriginal,
                'qtd_danificado' => $qtdDanificado,
                'qtd_emprenho' => $emUso,
                'qtd_disponivel' => $disponivel,
            ]);
        }

        return $resultado;
    }
}

/*
NOVA L√ìGICA COM SOBREPOSI√á√ÉO DE PER√çODOS:

1. üîç ANALISA: Verifica loca√ß√µes com status 0 OU 1 que se sobrep√µem ao per√≠odo consultado
2. üìä CALCULA: quantidade_dispon√≠vel = estoque_f√≠sico - danificados - em_uso_sobreposto
3. üö´ N√ÉO ALTERA: Nunca modifica o estoque f√≠sico dos produtos
4. ‚úÖ RETORNA: Quantos itens est√£o livres considerando sobreposi√ß√µes

EXEMPLO PR√ÅTICO:
- Produto: Cadeira (100 unidades, 5 danificadas)
- Nova loca√ß√£o: 10/01 a 15/01
- Loca√ß√£o existente (status 0): 12/01 a 20/01 (10 cadeiras) ‚Üê SOBREP√ïE!
- Loca√ß√£o existente (status 2): 05/01 a 25/01 (20 cadeiras) ‚Üê N√ÉO CONTA!
- RESULTADO: 85 unidades dispon√≠veis (100 - 5 - 10 = 85)

STATUS DAS LOCA√á√ïES:
- Status 0 (pendente): Conta se houver sobreposi√ß√£o de per√≠odo
- Status 1 (parcial): Conta se houver sobreposi√ß√£o de per√≠odo
- Status 2 (finalizada): NUNCA conta

SOBREPOSI√á√ÉO DE PER√çODOS (usando Carbon):
Duas loca√ß√µes se sobrep√µem se:
- Loca√ß√£o existente INICIA <= Nova loca√ß√£o TERMINA
- E loca√ß√£o existente TERMINA >= Nova loca√ß√£o INICIA

EXEMPLOS DE SOBREPOSI√á√ÉO:
‚úÖ Nova: 10/01 a 15/01 | Existente: 12/01 a 20/01 (sobrep√µe)
‚úÖ Nova: 10/01 a 15/01 | Existente: 05/01 a 12/01 (sobrep√µe)
‚úÖ Nova: 10/01 a 15/01 | Existente: 08/01 a 18/01 (sobrep√µe totalmente)
‚ùå Nova: 10/01 a 15/01 | Existente: 16/01 a 20/01 (n√£o sobrep√µe)
‚ùå Nova: 10/01 a 15/01 | Existente: 01/01 a 09/01 (n√£o sobrep√µe)
*/